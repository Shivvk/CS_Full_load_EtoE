{
	"name": "1b_pl_source_sftp_ingestion",
	"properties": {
		"activities": [
			{
				"name": "Lookup for sfpt",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureDatabricksDeltaLakeSource",
						"query": {
							"value": "@concat('select control.source_ref_id, control.host_name, control.port, control.user_name, control.secret_name, control.storage_account, control.adls_url, control.container_name, control.logic_app_url, control.email_id, param.source_file_or_table_name, param.source_file_path, param.adls_file_path, param.bronze_schema, param.bronze_tbl, param.silver_schema, param.silver_tbl, param.gold_schema, param.gold_tbl from ', pipeline().parameters.metadata_database,'.tbl_source_control as control join ',pipeline().parameters.metadata_database,'.tbl_parameters as param on control.job_id = param.job_id where param.job_id = ',pipeline().parameters.job_id)",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "ds_metadata_adb_deltalake",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Get Metadata for sfpt",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Lookup for sfpt",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_input_sftp",
						"type": "DatasetReference",
						"parameters": {
							"host_name": {
								"value": "@activity('Lookup for sfpt').output.value[0].host_name",
								"type": "Expression"
							},
							"port": {
								"value": "@activity('Lookup for sfpt').output.value[0].port",
								"type": "Expression"
							},
							"user_name": {
								"value": "@activity('Lookup for sfpt').output.value[0].user_name",
								"type": "Expression"
							},
							"secret_name": {
								"value": "@activity('Lookup for sfpt').output.value[0].secret_name",
								"type": "Expression"
							},
							"Source_file_path": {
								"value": "@activity('Lookup for sfpt').output.value[0].source_file_path",
								"type": "Expression"
							},
							"file_name": "*"
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "SftpReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false,
						"disableChunking": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "check files in sfpt",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get Metadata for sfpt",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(length(activity('Get Metadata for sfpt').output.childItems),0)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "zero file found log",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks notebook/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logMessage": {
										"value": "no files found in sfpt ",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"status": {
										"value": "sucess",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "pipeline ended",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "zero file found log",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks notebook/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logMessage": {
										"value": "pipelined ended",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"status": {
										"value": "sucess",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Fail1",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "pipeline ended",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": "pipeline ended",
								"errorCode": "no files"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "files copied",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks notebook/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat(string(length(activity('Get Metadata for sfpt').output.childItems)), ' files copied from sfpt')",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"status": {
										"value": "sucess",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "for each for source file",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "check files in sfpt",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup for sfpt').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "copy_source_file",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "SftpReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false,
										"disableChunking": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_input_sftp",
									"type": "DatasetReference",
									"parameters": {
										"host_name": {
											"value": "@item().host_name",
											"type": "Expression"
										},
										"port": {
											"value": "@item().port",
											"type": "Expression"
										},
										"user_name": {
											"value": "@item().user_name",
											"type": "Expression"
										},
										"secret_name": {
											"value": "@item().secret_name",
											"type": "Expression"
										},
										"Source_file_path": {
											"value": "@item().source_file_path",
											"type": "Expression"
										},
										"file_name": {
											"value": "@item().source_file_or_table_name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_output_csv",
									"type": "DatasetReference",
									"parameters": {
										"container_name": {
											"value": "@item().container_name",
											"type": "Expression"
										},
										"adls_file_path": {
											"value": "@item().adls_file_path",
											"type": "Expression"
										},
										"filename": {
											"value": "@item().source_file_or_table_name",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "copy sucess log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "copy_source_file",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks notebook/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('copied ', item().source_file_or_table_name, ' file to adls landing container')",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"status": {
										"value": "sucess",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "copy fail log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "copy_source_file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks notebook/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									" loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('fail to copy ', item().source_file_or_table_name, ' file to adls landing container')",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"status": {
										"value": "@concat( 'Error: ', activity('copy_source_file').output.message)",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "sfpt bronze injection",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "copy_source_file",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "2b_pl_sftp_landing_to_bronze",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"metadata_values": {
										"value": "@item()",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Archive src type",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "sfpt bronze injection",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/setup/archive/archive_source_files",
								"baseParameters": {
									"LoadID": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"file_path": {
										"value": "@item().adls_file_path",
										"type": "Expression"
									},
									"source_file_name": {
										"value": "@item().source_file_or_table_name",
										"type": "Expression"
									},
									"storage_account_name": {
										"value": "@item().storage_account",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "archive sucess log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "Archive src type",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks notebook/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('Archive source file ', item().source_file_or_table_name)",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"status": {
										"value": "sucess",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "archive fail log",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "Archive src type",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks notebook/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									" loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('failed to archive ', item().source_file_or_table_name)",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"status": {
										"value": "@concat( 'Error: ', activity('Archive src type').Error.message)",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "Ls_databricks_compute",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "trigger pl_bronxe_to_silver",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "sfpt bronze injection",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "3_pl_bronze_to_silver",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"metadata_values": {
										"value": "@item()",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "trigger 4_pl_silver_to_gold",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "for each for source file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "4_pl_silver_to_gold",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"metadata_values": {
							"value": "@activity('Lookup for sfpt').output.value[0]",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "pipeline ended log",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "trigger 4_pl_silver_to_gold",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/databricks notebook/log_record_tbl_insert",
					"baseParameters": {
						"env": {
							"value": "@pipeline().globalParameters.env",
							"type": "Expression"
						},
						"loadId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"logMessage": {
							"value": "pipeline ended",
							"type": "Expression"
						},
						"logTimeStamp": {
							"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
							"type": "Expression"
						},
						"pipeLineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"status": {
							"value": "sucess",
							"type": "Expression"
						},
						"triggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Ls_databricks_compute",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "pipeline failure log",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "trigger 4_pl_silver_to_gold",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/databricks notebook/log_record_tbl_insert",
					"baseParameters": {
						"env": {
							"value": "@pipeline().globalParameters.env",
							"type": "Expression"
						},
						"loadId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"logMessage": {
							"value": "pipeline ended",
							"type": "Expression"
						},
						"logTimeStamp": {
							"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
							"type": "Expression"
						},
						"pipeLineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"status": {
							"value": "failure",
							"type": "Expression"
						},
						"triggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Ls_databricks_compute",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "pipeline failure log_",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "for each for source file",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/databricks notebook/log_record_tbl_insert",
					"baseParameters": {
						"env": {
							"value": "@pipeline().globalParameters.env",
							"type": "Expression"
						},
						"loadId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"logMessage": {
							"value": "pipeline ended",
							"type": "Expression"
						},
						"logTimeStamp": {
							"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
							"type": "Expression"
						},
						"pipeLineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"status": {
							"value": "failure",
							"type": "Expression"
						},
						"triggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Ls_databricks_compute",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"job_id": {
				"type": "string",
				"defaultValue": "101"
			},
			"metadata_database": {
				"type": "string",
				"defaultValue": "metadata_schema"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-12-04T11:43:23Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}